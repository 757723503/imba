{
    // Place your workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "return if not server": {
        "scope": "javascript,typescript",
        "prefix": "ifnotserver",
        "body": ["if (!IsServer()) return;"],
        "description": "fast type of if not is server"
    },
    "created ability": {
        "scope": "javascript,typescript",
        "prefix": "@registerAbility",
        "body": [
            "@registerAbility()",
            "export class imba_$1 extends BaseAbility {",
                "GetIntrinsicModifierName(): string {",
                    "return '$2';",
                "}",
                "OnSpellStart(keys?: SpellStartParams): void {}",
            "}",
        ],
        "description": "创建技能代码块"
    },
    "created modifier": {
        "scope": "javascript,typescript",
        "prefix": "@registerModifier",
        "body": [
            "@registerModifier()",
           "export class modifier_imba_$1 extends BaseModifier {",
                "GetModifierConfig(): ModifierConfig {",
                   " return {",
                        "is_debuff: false,",
                        "is_hidden: false,",
                        "not_purgable: true,",
                        "not_purgable_exception: true,",
                        "not_remove_on_death: true,",
                    "};",
                "}",
                "OnCreated(params: ModifierParams): void {",
                "}",
               " DeclareFunctions(): ModifierFunction[] {",
                    "return CDeclareFunctions();",
                "}",
                "_customDeclare = [];",
                "CustomDeclareFunctions(): ModifierFunctions[] {",
                    "return this._customDeclare;",
                "}",
            "}",
        ],
        "description": "创建modifier代码块"
    },

    "findunits": {
        "scope": "javascript,typescript",
        "prefix": "CFindUnitsInRadius",
        "body": [
           " CFindUnitsInRadius({",
                "team: this.caster.GetTeamNumber(),",
                "location: this.caster.GetAbsOrigin(),",
                "flagFilter: UnitTargetFlags.FOW_VISIBLE,",
                "teamFilter: UnitTargetTeam.ENEMY,",
               "typeFilter: UnitTargetType.HERO + UnitTargetType.BASIC ,",
                "radius: 1000,",
                "order: FindOrder.CLOSEST,",
            "});",
        ],
        "description": "创建findunits代码块"
    },
    "rootForReactPanorama": {
        "prefix": "root",
        "body": [
            "<root>",
            "\t<styles>",
            "\t\t<include src=\"./styles.less\" />",
            "\t</styles>",
            "\t<scripts>",
            "\t\t<include src=\"./scripts.tsx\" />",
            "\t</scripts>",
            "\t<Panel />",
            "</root>"
        ],
        "description": "create a root element"
    }
}
